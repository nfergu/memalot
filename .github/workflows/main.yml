# .github/workflows/ci.yml

name: CI

# Run this workflow on pushes and pull requests to the main branch
on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"

# Concurrency setting to cancel older runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      # Don't cancel all jobs if one Python version fails
      fail-fast: false
      # Define the Python versions to test against
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure uv
        uses: astral-sh/setup-uv@v1

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: uv pip install '.[test, mcp]'

      - name: Lint with Ruff
        run: uv run ruff check src

      - name: Check formatting with Ruff
        run: uv run ruff format --check src

      - name: Type check with mypy
        run: uv run mypy --config-file ./pyproject.toml

      - name: Run unit tests with pytest (with coverage enabled)
        run: uv run pytest

      - name: Run integration tests with pytest without coverage
        run: uv run pytest src/tests_integration -s --no-cov

  test-dependency-versions:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
        resolution: [ "highest", "lowest-direct" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure uv
        uses: astral-sh/setup-uv@v1

      - name: Create virtual environment
        run: uv venv

      - name: Compile and install dependencies with ${{ matrix.resolution }} resolution
        run: |
          uv pip compile pyproject.toml --extra test --extra mcp --resolution ${{ matrix.resolution }} -o requirements.txt
          uv pip install -r requirements.txt

      - name: Run unit tests with pytest (with coverage enabled)
        run: uv run pytest

  test-performance:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure uv
        uses: astral-sh/setup-uv@v1

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: uv pip install '.[test, mcp]'

      - name: Run performance tests
        run: uv run pytest src/tests_performance --benchmark-only --no-cov
